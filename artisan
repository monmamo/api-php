#!/usr/bin/env php
<?php

use App\Enums\Hosts;
use App\Facades\Host;
use Illuminate\Contracts\Console\Kernel;


define('LARAVEL_START', microtime(true));

// Register the auto loader. Composer provides a convenient, automatically generated class loader for this application. We just need to utilize it! We'll simply require it into the script here so we don't need to manually load our classes.

require __DIR__ . '/vendor/autoload.php';

// Build the application instance.

$app = new class  extends \App\Applications\BaseApplication
{
    /**
     * Constructor.
     *
     * DO NOT    $app->bootstrapKernel() here.
     *
     *
     * @group mutator
     * @group nonary
     *
     * @uses \App\Facades\Host::bind
     * @uses \Illuminate\Foundation\Application::__construct
     * @uses \Illuminate\Support\Facades\Facade::setFacadeApplication
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();

        Host::setFacadeApplication($this);
        Host::bind(Hosts::CLI);
    }


    /**
     * Returns the kernel that needs tbo be bootstrapped for the application.
     *
     *
     * @implements \App\Applications\BaseApplication
     * @group nonary
     *
     * @uses \Illuminate\Foundation\Application::make
     */
    public function getKernel(): object
    {
        return $this->make(Kernel::class);
    }

    /**
     * Returns whether the application is running in the console.
     *
     *
     * @implements \Illuminate\Contracts\Foundation\Application::runningInConsole
     * @group nonary
     *
     * @return bool
     */
    public function runningInConsole()
    {
        return true;
    }
};

// Once we have the application, we can handle the incoming request using the application's HTTP kernel.

$kernel = $app->getKernel();

// Run the Artisan application. The response will be sent back to the console.

$status = $kernel->handle(
    $input = new \Symfony\Component\Console\Input\ArgvInput,
    new \Symfony\Component\Console\Output\ConsoleOutput
);

// Terminate the application.

$kernel->terminate($input, $status);

exit($status);
